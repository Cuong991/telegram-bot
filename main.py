import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import nest_asyncio
import asyncio
import datetime
import pytz

# Token c·ªßa b·∫°n
TOKEN = "7804124843:AAGIrk9aIOZ9cfjrf0jhsOTZCCUoKHEgHLk"

# H√†m l·∫•y d·ªØ li·ªáu Fear & Greed Index
def get_fear_and_greed():
    try:
        url = "https://api.alternative.me/fng/"
        response = requests.get(url)
        data = response.json()

        value = int(data['data'][0]['value'])
        return value
    except Exception as e:
        print(f"L·ªói khi l·∫•y Fear & Greed Index: {e}")
        return None

# H√†m l·∫•y th·ªùi gian hi·ªán t·∫°i ·ªü Vi·ªát Nam + x√°c ƒë·ªãnh qu√Ω
def get_vietnam_time():
    vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.datetime.now(vn_tz)
    month = now.month

    if 1 <= month <= 3:
        quarter = "Qu√Ω 1"
    elif 4 <= month <= 6:
        quarter = "Qu√Ω 2"
    elif 7 <= month <= 9:
        quarter = "Qu√Ω 3"
    else:
        quarter = "Qu√Ω 4"

    formatted_time = now.strftime(f"%H:%M - %d/%m/%Y ({quarter})")
    return formatted_time

# H√†m chuy·ªÉn ch·ªâ s·ªë th√†nh ti·∫øng Vi·ªát
def get_status_text(value):
    if value <= 24:
        return "S·ª£ h√£i t·ªôt ƒë·ªôüî¥"
    elif 25 <= value <= 49:
        return "S·ª£ h√£iüü†"
    elif 50 <= value <= 54:
        return "Trung l·∫≠püîµ"
    elif 55 <= value <= 74:
        return "Tham lamüü¢"
    else:
        return "Tham lam t·ªôt ƒë·ªôüü¢‚ö°"

# H√†m l·∫•y Bitcoin v√† Altcoin Dominance t·ª´ CoinGecko API
def get_dominance_data():
    try:
        url = "https://api.coingecko.com/api/v3/global"
        response = requests.get(url)
        data = response.json()

        btc_dominance = data['data']['market_cap_percentage']['btc']
        altcoin_dominance = 100 - btc_dominance

        return round(btc_dominance, 2), round(altcoin_dominance, 2)
    except Exception as e:
        print(f"L·ªói khi l·∫•y d·ªØ li·ªáu Dominance: {e}")
        return None, None

# Khi g√µ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Ch·ªâ s·ªë Tham lam & S·ª£ h√£i Crypto", callback_data="check_fear_greed")],
        [InlineKeyboardButton("Ch·ªâ s·ªë Bitcoin Dominance & Altcoin", callback_data="check_dominance")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚≠êCh·ªçn ch·ª©c nƒÉng th·ª±c hi·ªán‚≠ê: More to come soon!", reply_markup=reply_markup)

# Khi g√µ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "C√°c l·ªánh h·ªó tr·ª£:\n\n"
        "/start - B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng bot\n"
        "/help - Xem h∆∞·ªõng d·∫´n c√°c l·ªánh\n\n"
        "üëâ Admin h·ªó tr·ª£: @cuong49"
    )
    await update.message.reply_text(help_text)

# Khi b·∫•m n√∫t
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id

    if query.data == "check_fear_greed":
        value = get_fear_and_greed()
        if value is not None:
            status_text = get_status_text(value)
            vietnam_time = get_vietnam_time()
            message = (
                f">>Ch·ªâ s·ªë Tham lam & S·ª£ h√£i hi·ªán t·∫°i: üëâ <b>{value}</b>\n\n"
                f"Th·ªùi gian: {vietnam_time}\n\n"
                f"- <b>Tr·∫°ng th√°i:</b> {status_text}\n\n"
                f"üî¥ = s·ª£ h√£i t·ªôt ƒë·ªô\n"
                f"üü† = s·ª£ h√£i\n"
                f"üîµ = trung l·∫≠p\n"
                f"üü¢ = tham lam\n"
                f"üü¢‚ö° = tham lam t·ªôt ƒë·ªô\n\n"
                f"<b>Admin</b>: @cuong49"
            )
        else:
            message = "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch·ªâ s·ªë. Vui l√≤ng th·ª≠ l·∫°i sau."

        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")

    elif query.data == "check_dominance":
        btc_dominance, altcoin_dominance = get_dominance_data()
        if btc_dominance is not None:
            vietnam_time = get_vietnam_time()

            # D·ª± ƒëo√°n kh·∫£ nƒÉng Altcoin Season v·ªõi emoji
            if altcoin_dominance < 45:
                season_chance = "Th·∫•p üîª"
            elif 45 <= altcoin_dominance < 55:
                season_chance = "Trung b√¨nh ‚öñÔ∏è"
            elif 55 <= altcoin_dominance < 65:
                season_chance = "Kh·∫£ nƒÉng s·∫Øp di·ªÖn ra cao üöÄ"
            else:
                season_chance = "Altcoin season ƒëang di·ªÖn ra üåü"

            message = (
                f">>Ch·ªâ s·ªë Bitcoin Dominance hi·ªán t·∫°i: üëâ <b>{btc_dominance}%</b>\n\n"
                f"Ch·ªâ s·ªë Altcoin Dominance hi·ªán t·∫°i: üëâ <b>{altcoin_dominance}%</b>\n\n"
                f"Th·ªùi gian: {vietnam_time}\n\n"
                f"Kh·∫£ nƒÉng altcoin season di·ªÖn ra: <b>{season_chance}</b>\n\n"
                f"- <b>Ghi ch√∫:</b> Ch·ªâ s·ªë Altcoin Dominance c√†ng cao th√¨ kh·∫£ nƒÉng Altcoin Season c√†ng m·∫°nh.\n\n"
                f"<b>Admin</b>: @cuong49"
            )
        else:
            message = "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu Dominance. Vui l√≤ng th·ª≠ l·∫°i sau."

        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button))

    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
    
