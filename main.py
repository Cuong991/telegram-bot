import os
import requests
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import nest_asyncio
import asyncio
import datetime
import pytz
from telegram.error import TelegramError

# Thi·∫øt l·∫≠p logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Token c·ªßa b·∫°n
TOKEN = "7804124843:AAGIrk9aIOZ9cfjrf0jhsOTZCCUoKHEgHLk"

# Danh s√°ch l∆∞u chat_id
chat_ids = set()

# H√†m l·∫•y d·ªØ li·ªáu Fear & Greed Index
def get_fear_and_greed():
    try:
        url = "https://api.alternative.me/fng/"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        value = int(data['data'][0]['value'])
        logger.info(f"Fear & Greed Index: {value}")
        return value
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y Fear & Greed Index: {e}")
        return None

# H√†m l·∫•y th·ªùi gian hi·ªán t·∫°i ·ªü Vi·ªát Nam + x√°c ƒë·ªãnh qu√Ω
def get_vietnam_time():
    try:
        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        now = datetime.datetime.now(vn_tz)
        month = now.month

        if 1 <= month <= 3:
            quarter = "Qu√Ω 1"
        elif 4 <= month <= 6:
            quarter = "Qu√Ω 2"
        elif 7 <= month <= 9:
            quarter = "Qu√Ω 3"
        else:
            quarter = "Qu√Ω 4"

        formatted_time = now.strftime(f"%H:%M - %d/%m/%Y ({quarter})")
        return formatted_time
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y th·ªùi gian Vi·ªát Nam: {e}")
        return "Kh√¥ng x√°c ƒë·ªãnh"

# H√†m chuy·ªÉn ch·ªâ s·ªë th√†nh ti·∫øng Vi·ªát v√† m·ª©c c·∫£nh b√°o
def get_status_text(value):
    try:
        if value <= 24:
            return "S·ª£ h√£i t·ªôt ƒë·ªôüî¥", "‚ö°‚ö°‚ö° C·∫¢NH B√ÅO: Ch·ªâ s·ªë S·ª£ h√£i t·ªôt ƒë·ªô! H√£y c·∫©n tr·ªçng!"
        elif 25 <= value <= 49:
            return "S·ª£ h√£iüü†", "‚ö° C·∫¢NH B√ÅO: Th·ªã tr∆∞·ªùng ƒëang s·ª£ h√£i!"
        elif 50 <= value <= 54:
            return "Trung l·∫≠püîµ", "üîî TH√îNG B√ÅO: Th·ªã tr∆∞·ªùng ·ªü tr·∫°ng th√°i trung l·∫≠p."
        elif 55 <= value <= 74:
            return "Tham lamüü¢", "‚ö° C·∫¢NH B√ÅO: Th·ªã tr∆∞·ªùng ƒëang tham lam!"
        else:
            return "Tham lam t·ªôt ƒë·ªôüü¢‚ö°", "‚ö°‚ö°‚ö° C·∫¢NH B√ÅO: Ch·ªâ s·ªë Tham lam ƒë·∫°t c·ª±c ƒë·∫°i! H√£y c·∫©n tr·ªçng!"
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω tr·∫°ng th√°i: {e}")
        return "Kh√¥ng x√°c ƒë·ªãnh", "L·ªói khi x·ª≠ l√Ω tr·∫°ng th√°i."

# H√†m l·∫•y Bitcoin v√† Altcoin Dominance t·ª´ CoinGecko API
def get_dominance_data():
    try:
        url = "https://api.coingecko.com/api/v3/global"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()

        btc_dominance = data['data']['market_cap_percentage']['btc']
        altcoin_dominance = 100 - btc_dominance

        return round(btc_dominance, 2), round(altcoin_dominance, 2)
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu Dominance: {e}")
        return None, None

# H√†m ki·ªÉm tra tr·∫°ng th√°i bot
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        vietnam_time = get_vietnam_time()
        message = (
            f"üü¢ Bot ƒëang ho·∫°t ƒë·ªông!\n\n"
            f"Th·ªùi gian: {vietnam_time}\n"
            f"Chat ID: {update.message.chat_id}\n"
            f"S·ªë l∆∞·ª£ng chat ƒëƒÉng k√Ω: {len(chat_ids)}\n\n"
            f"<b>Admin</b>: @cuong49"
        )
        await update.message.reply_text(message, parse_mode="HTML")
        logger.info(f"Tr·∫°ng th√°i bot ƒë∆∞·ª£c ki·ªÉm tra b·ªüi chat_id {update.message.chat_id}")
    except Exception as e:
        logger.error(f"L·ªói trong status: {e}")
        await update.message.reply_text("ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML")

# H√†m g·ª≠i c·∫£nh b√°o ƒë·ªãnh k·ª≥
async def send_fear_greed_alert(context: ContextTypes.DEFAULT_TYPE):
    try:
        value = get_fear_and_greed()
        if value is not None:
            status_text, alert_message = get_status_text(value)
            vietnam_time = get_vietnam_time()
            message = (
                f"{alert_message}\n\n"
                f"Ch·ªâ s·ªë hi·ªán t·∫°i: <b>{value}</b>\n"
                f"Th·ªùi gian: {vietnam_time}\n\n"
                f"<b>Admin</b>: @cuong49"
            )
            for chat_id in chat_ids:
                try:
                    await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")
                    logger.info(f"G·ª≠i c·∫£nh b√°o ƒë·∫øn chat_id {chat_id}")
                except TelegramError as e:
                    logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn ƒë·∫øn chat_id {chat_id}: {e}")
        else:
            message = "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu Fear & Greed. Vui l√≤ng th·ª≠ l·∫°i sau."
            for chat_id in chat_ids:
                try:
                    await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")
                    logger.info(f"G·ª≠i th√¥ng b√°o l·ªói ƒë·∫øn chat_id {chat_id}")
                except TelegramError as e:
                    logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn ƒë·∫øn chat_id {chat_id}: {e}")
    except Exception as e:
        logger.error(f"L·ªói trong send_fear_greed_alert: {e}")

# Khi g√µ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.message.chat_id
        chat_ids.add(chat_id)  # L∆∞u chat_id
        logger.info(f"Th√™m chat_id {chat_id} v√†o danh s√°ch")
        keyboard = [
            [InlineKeyboardButton("Ch·ªâ s·ªë Tham lam & S·ª£ h√£i Crypto", callback_data="check_fear_greed")],
            [InlineKeyboardButton("Ch·ªâ s·ªë Bitcoin Dominance & Altcoin", callback_data="check_dominance")],
            [InlineKeyboardButton("Ch·ª©c nƒÉng Test", callback_data="test_function")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚≠êCh·ªçn ch·ª©c nƒÉng th·ª±c hi·ªán‚≠ê: More to come soon!", reply_markup=reply_markup)
    except TelegramError as e:
        logger.error(f"L·ªói trong start: {e}")
        await update.message.reply_text("ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML")

# Khi g√µ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        help_text = (
            "C√°c l·ªánh h·ªó tr·ª£:\n\n"
            "/start - B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng bot\n"
            "/help - Xem h∆∞·ªõng d·∫´n c√°c l·ªánh\n"
            "/status - Ki·ªÉm tra tr·∫°ng th√°i bot\n\n"
            "üëâ Admin h·ªó tr·ª£: @cuong49"
        )
        await update.message.reply_text(help_text)
    except TelegramError as e:
        logger.error(f"L·ªói trong help_command: {e}")
        await update.message.reply_text("ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML")

# Khi b·∫•m n√∫t
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        chat_id = query.message.chat_id

        if query.data == "check_fear_greed":
            value = get_fear_and_greed()
            if value is not None:
                status_text, _ = get_status_text(value)
                vietnam_time = get_vietnam_time()
                message = (
                    f">>Ch·ªâ s·ªë Tham lam & S·ª£ h√£i hi·ªán t·∫°i: üëâ <b>{value}</b>\n\n"
                    f"Th·ªùi gian: {vietnam_time}\n\n"
                    f"- <b>Tr·∫°ng th√°i:</b> {status_text}\n\n"
                    "üî¥ = s·ª£ h√£i t·ªôt ƒë·ªô\n"
                    "üü† = s·ª£ h√£i\n"
                    "üîµ = trung l·∫≠p\n"
                    "üü¢ = tham lam\n"
                    "üü¢‚ö° = tham lam t·ªôt ƒë·ªô\n\n"
                    "<b>Admin</b>: @cuong49"
                )
            else:
                message = "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch·ªâ s·ªë. Vui l√≤ng th·ª≠ l·∫°i sau."

            await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")

        elif query.data == "check_dominance":
            btc_dominance, altcoin_dominance = get_dominance_data()
            if btc_dominance is not None:
                vietnam_time = get_vietnam_time()

                if altcoin_dominance < 45:
                    season_chance = "Th·∫•p üîª"
                elif 45 <= altcoin_dominance < 55:
                    season_chance = "Trung b√¨nh ‚öñÔ∏è"
                elif 55 <= altcoin_dominance < 65:
                    season_chance = "Kh·∫£ nƒÉng s·∫Øp di·ªÖn ra cao üöÄ"
                else:
                    season_chance = "Altcoin season ƒëang di·ªÖn ra üåü"

                message = (
                    f">>Ch·ªâ s·ªë Bitcoin Dominance hi·ªán t·∫°i: üëâ <b>{btc_dominance}%</b>\n\n"
                    f"Ch·ªâ s·ªë Altcoin Dominance hi·ªán t·∫°i: üëâ <b>{altcoin_dominance}%</b>\n\n"
                    f"Th·ªùi gian: {vietnam_time}\n\n"
                    f"Kh·∫£ nƒÉng altcoin season di·ªÖn ra: <b>{season_chance}</b>\n\n"
                    "- <b>Ghi ch√∫:</b> Ch·ªâ s·ªë Altcoin Dominance c√†ng cao th√¨ kh·∫£ nƒÉng Altcoin Season c√†ng m·∫°nh.\n\n"
                    "<b>Admin</b>: @cuong49"
                )
            else:
                message = "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu Dominance. Vui l√≤ng th·ª≠ l·∫°i sau."

            await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")

        elif query.data == "test_function":
            vietnam_time = get_vietnam_time()
            message = (
                f">>Ch·ª©c nƒÉng Test ƒëang ho·∫°t ƒë·ªông! üéâ\n\n"
                f"Th·ªùi gian: {vietnam_time}\n\n"
                f"ƒê√¢y l√† m·ªôt ch·ª©c nƒÉng th·ª≠ nghi·ªám.\n\n"
                "<b>Admin</b>: @cuong49"
            )
            await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")

    except TelegramError as e:
        logger.error(f"L·ªói trong button: {e}")
        await context.bot.send_message(chat_id=chat_id, text="ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML")

async def main():
    try:
        logger.info("Kh·ªüi t·∫°o bot v·ªõi token...")
        app = ApplicationBuilder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("status", status))
        app.add_handler(CallbackQueryHandler(button))

        # Th√™m c√¥ng vi·ªác ƒë·ªãnh k·ª≥: g·ª≠i c·∫£nh b√°o m·ªói 24 gi·ªù
        app.job_queue.run_repeating(send_fear_greed_alert, interval=24*60*60, first=10)  # Ch·∫°y sau 10 gi√¢y ƒë·∫ßu ti√™n

        logger.info("B·∫Øt ƒë·∫ßu ch·∫°y bot...")
        await app.run_polling(allowed_updates=Update.ALL_TYPES)
    except TelegramError as e:
        logger.error(f"L·ªói Telegram trong main: {e}")
        raise
    except Exception as e:
        logger.error(f"L·ªói kh√°c trong main: {e}")
        raise

if __name__ == "__main__":
    try:
        logger.info("√Åp d·ª•ng nest_asyncio v√† ch·∫°y bot...")
        nest_asyncio.apply()
        asyncio.run(main())
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông: {e}")
